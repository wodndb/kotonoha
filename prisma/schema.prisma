generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma" // prisma에서 권장하는 nextjs 프로젝트 상의 generated 폴더 위치
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 문자 유형 (한자, 히라가나, 가타카나)을 정의하는 enum
enum CharType {
  /// 한자
  KANJI

  /// 히라가나
  HIRAGANA

  /// 가타카나
  KATAKANA
}

/// 학습 상태를 정의하는 enum
enum StudyStatus {
  /// 학습 중
  LEARNING

  /// 복습 중
  REVIEWING

  /// 마스터 완료
  MASTERED

  /// 건너뛰기 등 추가 가능
  SKIP
}

/// 퀴즈 유형을 정의하는 enum
enum QuizType {
  /// 단어 뜻 맞추기 (일본어 -> 한국어)
  MEANING_MATCHING

  /// 단어 읽기 맞추기 (일본어 -> 요미가나)
  READING_MATCHING

  /// 빈칸 채우기 (예문 내 단어)
  FILL_IN_THE_BLANK

  /// 듣기 문제
  LISTENING

  /// 객관식 (4지선다 등)
  MULTIPLE_CHOICE

  /// 주관식 (직접 입력)
  SHORT_ANSWER
}

/// 사용자 역할을 정의하는 enum
enum UserRoleType {
  /// 일반 사용자 (기본값)
  USER

  /// 단어 추가/편집 권한이 있는 사용자
  EDITOR

  /// 모든 관리 권한이 있는 사용자
  ADMIN
}

/// [AuthJS] 사용자 모델
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserWord    UserWord[]
  QuizSession QuizSession[]
  QuizRecord  QuizRecord[]

  /// 사용자의 역할 (기본값은 USER)
  role UserRoleType @default(USER)
}

/// [AuthJS] 계정 모델
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String? @map("sessionState")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

/// [AuthJS] 세션 모델
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// [AuthJS] 인증 토큰 모델
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

/// 사용자 단어 모델
/// 사용자가 학습 중인 단어와 그 상태를 저장합니다.
model UserWord {
  id     Int    @id @default(autoincrement())
  userId String
  wordId Int

  /// 학습 상태 (예: 학습 중, 복습 중, 마스터 완료 등)
  studyStatus StudyStatus

  /// 즐겨찾기 여부
  isFavorite Boolean @default(false)

  /// 학습 상태 변경 시각
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  word Word @relation(fields: [wordId], references: [id])

  @@unique([userId, wordId])
}

/// 단어 모델
/// 일본어 단어를 저장하는 모델로, 각 단어는 여러 개의 요미가나(읽기)와 의미를 가질 수 있습니다.
model Word {
  id Int @id @default(autoincrement())

  /// 단어 본문 (예: 日本語)
  text String

  /// kanji, gana, mixed
  hasKanji Boolean

  /// JLPT N1, N2 등 또는 그 외
  level String?

  /// 단어 전체의 대표 요미가나 (예: にほんご)
  reading String?

  /// 단어를 구성하는 문자 별로 요미가나를 쪼개서 저장한 데이터.
  components Json?

  meanings Meaning[]
  UserWord UserWord[]

  synonymsFrom WordSynonym[] @relation("SynonymFrom")
  synonymsTo   WordSynonym[] @relation("SynonymTo")

  antonymsFrom WordAntonym[] @relation("AntonymFrom")
  antonymsTo   WordAntonym[] @relation("AntonymTo")
  QuizRecord   QuizRecord[]
}

/// 단어의 의미를 정의하는 모델.
model Meaning {
  id           Int     @id @default(autoincrement())
  wordId       Int
  text         String
  partOfSpeech String?

  examples Example[]

  word Word @relation(fields: [wordId], references: [id])
}

/// 단어의 예문을 정의하는 모델.
model Example {
  id Int @id @default(autoincrement())

  sentence    String
  translation String?

  meaningId Int
  meaning   Meaning @relation(fields: [meaningId], references: [id])
}

/// 단어의 동의어 관계를 정의하는 모델.
/// 자기 자신을 참조하기 위해 두 개의 관계를 정의합니다.
/// 검색 로직을 간소화하기 위해 word, synonym 쌍이 중복해서 존재해야 합니다. 예) (ドキドキ, ワクワク), (ワクワク, ドキドキ)
model WordSynonym {
  wordId    Int
  synonymId Int

  word    Word @relation("SynonymFrom", fields: [wordId], references: [id])
  synonym Word @relation("SynonymTo", fields: [synonymId], references: [id])

  @@id([wordId, synonymId])
}

/// 단어의 반의어 관계를 정의하는 모델.
/// 자기 자신을 참조하기 위해 두 개의 관계를 정의합니다.
/// 검색 로직을 간소화하기 위해 word, antonym 쌍이 중복해서 존재해야 합니다. 예) (大きい, 小さい), (小さい, 大きい)
model WordAntonym {
  wordId    Int
  antonymId Int

  word    Word @relation("AntonymFrom", fields: [wordId], references: [id])
  antonym Word @relation("AntonymTo", fields: [antonymId], references: [id])

  @@id([wordId, antonymId])
}

/// 퀴즈 세션 모델
/// 사용자가 여러 문제를 연속해서 푸는 퀴즈 세션을 기록합니다.
model QuizSession {
  id             Int       @id @default(autoincrement())
  userId         String
  startedAt      DateTime  @default(now())
  endedAt        DateTime?
  score          Int? // 세션 총점 (선택 사항)
  totalQuestions Int? // 세션 내 총 문제 수 (선택 사항)

  user User @relation(fields: [userId], references: [id])

  QuizRecord QuizRecord[] // 이 세션에 속한 퀴즈 기록들

  @@index([userId])
}

/// 퀴즈 기록 모델
/// 사용자의 개별 퀴즈 풀이 기록을 저장합니다.
model QuizRecord {
  id            Int      @id @default(autoincrement())
  userId        String
  wordId        Int
  quizTypeId    QuizType // 퀴즈 유형 (enum 사용)
  isCorrect     Boolean // 정답 여부
  attemptedAt   DateTime @default(now()) // 문제 풀이 시각
  responseTime  Int? // 문제 풀이에 걸린 시간 (밀리초 단위, 선택 사항)
  userAnswer    String? // 사용자가 입력한 답 (주관식 등에서 유용)
  correctAnswer String? // 정답 (확인용, 선택 사항)

  // QuizSession과 연결 (선택 사항)
  quizSessionId Int?
  quizSession   QuizSession? @relation(fields: [quizSessionId], references: [id])

  user User @relation(fields: [userId], references: [id])
  word Word @relation(fields: [wordId], references: [id])

  @@index([userId, wordId, quizTypeId]) // 쿼리 효율성을 위한 인덱스 추가
  @@index([quizSessionId]) // 퀴즈 세션별 조회를 위한 인덱스
}
