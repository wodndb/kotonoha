generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 문자 유형 (한자, 히라가나, 가타카나)을 정의하는 enum
enum CharType {
  /// 한자
  KANJI

  /// 히라가나
  HIRAGANA

  /// 가타카나
  KATAKANA
}

/// 학습 상태를 정의하는 enum
enum StudyStatus {
  /// 학습 중
  LEARNING

  /// 복습 중
  REVIEWING

  /// 마스터 완료
  MASTERED

  /// 건너뛰기 등 추가 가능
  SKIP
}

/// 사용자 모델
model User {
  id       String     @id @default(uuid())
  email    String     @unique
  name     String?
  UserWord UserWord[]
}

/// 사용자 단어 모델
/// 사용자가 학습 중인 단어와 그 상태를 저장합니다.
model UserWord {
  id     Int    @id @default(autoincrement())
  userId String
  wordId Int

  /// 학습 상태 (예: 학습 중, 복습 중, 마스터 완료 등)
  studyStatus StudyStatus

  /// 즐겨찾기 여부
  isFavorite Boolean @default(false)

  /// 학습 상태 변경 시각
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  word Word @relation(fields: [wordId], references: [id])

  @@unique([userId, wordId])
}

/// 단어 모델
/// 일본어 단어를 저장하는 모델로, 각 단어는 여러 개의 요미가나(읽기)와 의미를 가질 수 있습니다.
model Word {
  id Int @id @default(autoincrement())

  /// 단어 본문 (예: 日本語)
  text String

  /// kanji, gana, mixed
  type String

  /// JLPT N1, N2 등 또는 그 외
  level String?

  /// 단어 전체의 대표 요미가나 (예: にほんご)
  reading String?

  /// 품사 (예: 명사, 동사)
  partOfSpeech String?

  components WordComponent[]
  meanings   WordMeaning[]
  examples   Example[]
  UserWord   UserWord[]

  synonymsFrom WordSynonym[] @relation("SynonymFrom")
  synonymsTo   WordSynonym[] @relation("SynonymTo")

  antonymsFrom WordAntonym[] @relation("AntonymFrom")
  antonymsTo   WordAntonym[] @relation("AntonymTo")
}

/// 단어의 요미가나를 저장하기 위한 단어의 개별 문자 모델로
/// 이 모델은 단어(Word)와 1:N 관계를 가지며, 각 단어는 여러 개의 문자를 포함할 수 있습니다.
model WordComponent {
  id     Int @id @default(autoincrement())
  wordId Int

  /// 단어를 구성하는 개별 문자 (예: 日, 本, 語)
  char String

  /// 해당 문자의 요미가나 (예: 日 -> にち)
  reading String?

  /// 문자의 타입
  type CharType

  word Word @relation(fields: [wordId], references: [id])
}

/// 단어의 의미를 정의하는 모델.
model Meaning {
  id Int @id @default(autoincrement())

  /// 한국어 뜻
  text String

  words WordMeaning[]
}

/// 단어와 의미의 관계를 정의하는 모델.
/// 단어(Word)와 의미(Meaning) 사이의 다대다 관계를 표현합니다.
/// 단어에는 여러 의미가 있을 수 있고, 의미는 여러 단어에 연결될 수 있습니다.
model WordMeaning {
  wordId    Int
  meaningId Int

  word    Word    @relation(fields: [wordId], references: [id])
  meaning Meaning @relation(fields: [meaningId], references: [id])

  @@id([wordId, meaningId])
}

/// 단어의 예문을 정의하는 모델.
model Example {
  id     Int @id @default(autoincrement())
  wordId Int

  /// 일본어 예문
  sentence String

  /// 예문 한국어 번역
  translation String

  word Word @relation(fields: [wordId], references: [id])
}

/// 단어의 동의어 관계를 정의하는 모델.
/// 자기 자신을 참조하기 위해 두 개의 관계를 정의합니다.
/// 검색 로직을 간소화하기 위해 word, synonym 쌍이 중복해서 존재해야 합니다. 예) (ドキドキ, ワクワク), (ワクワク, ドキドキ)
model WordSynonym {
  wordId    Int
  synonymId Int

  word    Word @relation("SynonymFrom", fields: [wordId], references: [id])
  synonym Word @relation("SynonymTo", fields: [synonymId], references: [id])

  @@id([wordId, synonymId])
}

/// 단어의 반의어 관계를 정의하는 모델.
/// 자기 자신을 참조하기 위해 두 개의 관계를 정의합니다.
/// 검색 로직을 간소화하기 위해 word, antonym 쌍이 중복해서 존재해야 합니다. 예) (大きい, 小さい), (小さい, 大きい)
model WordAntonym {
  wordId    Int
  antonymId Int

  word    Word @relation("AntonymFrom", fields: [wordId], references: [id])
  antonym Word @relation("AntonymTo", fields: [antonymId], references: [id])

  @@id([wordId, antonymId])
}
